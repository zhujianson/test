//
//  HomeIndexItemViewController.m
//  healthManagement1.0
//
//  Created by jiuhao-yangshuo on 16/1/18.
//  Copyright © 2016年 xuGuohong. All rights reserved.
//

#import "HomeIndexItemViewController.h"
#import "HomeIndexCollectionViewCell.h"
#import "DraggableCollectionViewFlowLayout.h"
#import "LSCollectionViewHelper.h"
#import "UICollectionView+Draggable.h"

@interface HomeIndexItemViewController ()<UICollectionViewDelegate,UICollectionViewDataSource_Draggable>
{
    UICollectionView *m_collectionView;
    NSMutableArray *m_dataArray;
}
@end

@implementation HomeIndexItemViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self)
    {
        UIBarButtonItem *leftBtn = [[UIBarButtonItem alloc] initWithTitle:@"保存" style:UIBarButtonItemStylePlain target:self action:@selector(butEventHeader)];
        self.navigationItem.rightBarButtonItem = leftBtn;
    }
    return self;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.title = @"健康管理";
    // Do any additional setup after loading the view.
    m_dataArray = [[NSMutableArray alloc] init];
    [self getAllHomeMeunse];
}

- (void)butEventHeader
{
    [self updateAllHomeMeunse];
}
-(BOOL)closeNowView
{
    
   return  [super closeNowView];
}
//获取未读消息
- (void)getAllHomeMeunse
{
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    [[CommonHttpRequest defaultInstance] sendNewPostRequest:GET_API_ALLHOMEMENUS_URL values:dic requestKey:GET_API_ALLHOMEMENUS_URL delegate:self controller:self actiViewFlag:0 title:NSLocalizedString(@"加载中...", nil)];
}

- (void)updateAllHomeMeunse
{
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    
    NSArray *oneArray = m_dataArray[0];
    NSArray *twoArray = m_dataArray[1];
    NSMutableArray *confsArray = [NSMutableArray array];
    for (NSDictionary * dict in oneArray)
    {
        NSDictionary *dictNew = @{@"configureId":dict[@"configureId"],@"isHome":dict[@"isHome"] };
        [confsArray addObject:dictNew];
    }
    for (NSDictionary * dict in twoArray)
    {
        NSDictionary *dictNew = @{@"configureId":dict[@"configureId"],@"isHome":dict[@"isHome"] };
        [confsArray addObject:dictNew];
    }
    [dic setObject:confsArray forKey:@"confs"];
    [[CommonHttpRequest defaultInstance] sendNewPostRequest:GET_API_UPDATEHOMEMENUS_URL values:dic requestKey:GET_API_UPDATEHOMEMENUS_URL delegate:self controller:self actiViewFlag:0 title:NSLocalizedString(@"加载中...", nil)];
}

- (void)didFinishSuccess:(ASIHTTPRequest*)loader
{
    NSString* responseString = [loader responseString];
    NSDictionary* dic = [responseString KXjSONValueObject];
    
    NSDictionary *head = dic[@"head"];
    if (![head[@"state"] intValue]) {
        NSDictionary *body = dic[@"body"];
        if (!body.count)
        {
            return;
        }
        if ([loader.username isEqualToString:GET_API_ALLHOMEMENUS_URL])
        {
            NSArray *array = body[@"data"];
            [m_dataArray removeAllObjects];
    
            NSInteger countFirst = 5;
            NSMutableArray *subArray = [NSMutableArray array];
            for (NSUInteger j = 0; j < countFirst; j++)
            {
                [subArray addObject:array[j]];
            }
            [m_dataArray addObject:subArray];
            
            NSMutableArray *subArrayTwo = [NSMutableArray array];
            for (NSUInteger j = countFirst; j < array.count; j++)
            {
                [subArrayTwo addObject:array[j]];
            }
            [m_dataArray addObject:subArrayTwo];
            [self createSubViews];
        }
        if ([loader.username isEqualToString:GET_API_UPDATEHOMEMENUS_URL])
        {
            
        }
    }
    else
    {
        [Common TipDialog2:dic[@"msg"]];
    }
}
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)createSubViews
{
    int  CELL_ROW = 3;
    int  CELL_MARGIN = 1;
    int  CELL_LINE_MARGIN = 1;
    
    CGFloat cellW = (kDeviceWidth- CELL_MARGIN * (CELL_ROW + 1)) / CELL_ROW;
    DraggableCollectionViewFlowLayout *layout = [[DraggableCollectionViewFlowLayout alloc] init];
    layout.itemSize = CGSizeMake(cellW, cellW);// 定义cell的size
    layout.minimumInteritemSpacing = CELL_MARGIN;// 定义左右cell的最小间距
    layout.minimumLineSpacing = CELL_LINE_MARGIN;// 定义上下cell的最小间距
    
    m_collectionView = [[UICollectionView alloc] initWithFrame:CGRectMake(0, 0, kDeviceWidth, kDeviceHeight) collectionViewLayout:layout];
    m_collectionView.backgroundColor = [UIColor clearColor];
    [m_collectionView registerClass:[HomeIndexCollectionViewCell class] forCellWithReuseIdentifier:itemCell];
    [m_collectionView registerClass:[HomeIndexCollectionReusableView class] forSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:itemHeadView];
    m_collectionView.draggable = YES;
    m_collectionView.delegate = self;
    m_collectionView.dataSource = self;
    [self.view addSubview:m_collectionView];
}

#pragma mark <UICollectionViewDataSource>
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView
{
    return m_dataArray.count;
}

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {

    return [m_dataArray[section] count];
}

- (BOOL)collectionView:(LSCollectionViewHelper *)collectionView canMoveItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.item == 5)
    {
        return NO;
    }
    return YES;
}

- (BOOL)collectionView:(UICollectionView *)collectionView canMoveItemAtIndexPath:(NSIndexPath *)indexPath toIndexPath:(NSIndexPath *)toIndexPath
{
    // Prevent item from being moved to index 0
    if (toIndexPath.item == 5)
    {
        return NO;
    }
    return YES;
}

- (void)collectionView:(LSCollectionViewHelper *)collectionView moveItemAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath
{
    NSMutableArray *data1 = [m_dataArray objectAtIndex:fromIndexPath.section];
    NSMutableArray *data2 = [m_dataArray objectAtIndex:toIndexPath.section];
    NSString *indexData1 = [data1 objectAtIndex:fromIndexPath.item];
    [data1 removeObjectAtIndex:fromIndexPath.item];
    [data2 insertObject:indexData1 atIndex:toIndexPath.item];
}

-(void)collectionView:(UICollectionView *)collectionView didMoveItemAtIndexPath:(NSIndexPath *)indexPath toIndexPath:(NSIndexPath *)toIndexPath
{
    if (indexPath.section != toIndexPath.section)
    {
        NSMutableArray *data2 = [m_dataArray objectAtIndex:toIndexPath.section];
        NSIndexPath *newToIndex = [NSIndexPath indexPathForItem:toIndexPath.item + 1 inSection:toIndexPath.section];
        NSDictionary *dict = data2[newToIndex.item ];
        
        [data2 removeObjectAtIndex:newToIndex.item];
        NSMutableArray *data1 = [m_dataArray objectAtIndex:indexPath.section];
        [data1 insertObject:dict atIndex:indexPath.item];

        [collectionView performBatchUpdates:^{
            [collectionView deleteItemsAtIndexPaths:@[newToIndex]];
            [collectionView insertItemsAtIndexPaths:@[indexPath]];
            
        } completion:nil];
    }
}

- (UICollectionViewCell *) collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath{
    
    NSString *type = itemCell;
    UICollectionViewCell *cell;
//    if (indexPath.row == m_dataArray.count) {
//        type = itemAddCell;
//        cell = (HomeIndexCollectionViewCell*)[collectionView dequeueReusableCellWithReuseIdentifier:type forIndexPath:indexPath];
//    }
//    else {
        cell = (HomeIndexCollectionViewCell*)[collectionView dequeueReusableCellWithReuseIdentifier:type forIndexPath:indexPath];
        NSDictionary *dict = [m_dataArray[indexPath.section] objectAtIndex:indexPath.row];
        [((HomeIndexCollectionViewCell*)cell) setM_infoDict:dict];
//    }
    return cell;
}


- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{

}

-(UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath
{
    UICollectionReusableView *reusableView = nil;
    if (kind == UICollectionElementKindSectionHeader)
    {
        HomeIndexCollectionReusableView *headView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:itemHeadView forIndexPath:indexPath];
        reusableView = headView;
        [headView showText:!indexPath.section];
    }
    else
    {
        
    }
    return reusableView;
}
//在布局对象的代理协议方法中设置header的大小
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section
{
    float hight = section?7:40;
    return CGSizeMake(kDeviceWidth, hight);
}
@end

//
//  FriendListTableView.m
//  jiuhaohealth4.0
//
//  Created by xjs on 15/5/15.
//  Copyright (c) 2015年 xuGuohong. All rights reserved.
//

#import "FriendListTableView.h"
#import "FriendListCell.h"
#import "ShowConsultViewController.h"
#import "AddBuddy.h"
#import "UIImageView+WebCache.h"
#import "MsgDBOperate.h"

@interface FriendListTableView ()
{
//    MsgDBOperate *m_friendListDB;
//    NSMutableDictionary *m_apply;
}

@end

@implementation FriendListTableView
@synthesize m_tableView;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        
        UIBarButtonItem *right = [[UIBarButtonItem alloc] initWithTitle:@"添加 " style:UIBarButtonItemStylePlain target:self action:@selector(butAddEvent)];
        self.navigationItem.rightBarButtonItem = right;
        [right release];
        
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(removeFriend:) name:@"removeFriend" object:nil];
    }
    return self;
}

- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    
    if (m_deleteIndexpath)
    {
        [m_deleteIndexpath release];
        m_deleteIndexpath = nil;
    }
    if (m_FriendBlock) {
        [m_FriendBlock release];
    }
    [m_headView release];
    [m_tableView release];
    [m_dataArray release];
    
//    [m_friendListDB release];
    
    [super dealloc];
}

- (void)butAddEvent
{
    AddBuddy* code = [[AddBuddy alloc] init];
    code.title = @"查找";
    [self.navigationController pushViewController:code animated:YES];
    [code release];
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    m_dataArray = [[NSMutableArray alloc] init];
//    m_friendListDB = [[MsgDBOperate alloc] init];
    
    [self creatTableView];
    [NSThread detachNewThreadSelector:@selector(loadLocalFriendList) toTarget:self withObject:nil];
    
//    [self loadEditList];
//    [self getDataSource];
}

- (void)viewWillAppear:(BOOL)animated
{
    [self loadEditList];
//    [m_tableView reloadData];
}

- (void)creatTableView
{
    m_tableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, kDeviceWidth, kDeviceHeight) style:UITableViewStyleGrouped];
    m_tableView.delegate = self;
    m_tableView.dataSource = self;
    m_tableView.backgroundColor = [UIColor clearColor];
    m_tableView.rowHeight = 70.0;
    [Common setExtraCellLineHidden:m_tableView];
    [self.view addSubview:m_tableView];
    m_tableView.separatorColor = [CommonImage colorWithHexString:LINE_COLOR];
    if (IOS_7) {
        [m_tableView setSeparatorInset:UIEdgeInsetsMake(0, 0, 0, 0)];
    }
    m_headView = [[EGORefreshTableHeaderView alloc] initWithFrame:CGRectMake(0, -460, kDeviceWidth, 460)];
    m_headView.delegate = self;
    m_headView.backgroundColor = [UIColor clearColor];
    [m_tableView addSubview:m_headView];
    [m_headView egoRefreshScrollViewDidScroll:m_tableView];
    [m_headView egoRefreshScrollViewDidEndDragging:m_tableView];
}

//通讯录
- (void)loadLocalFriendList
{
    m_tableView.dataSource = nil;
    NSMutableArray *array = [[MsgDBOperate shareInstance] getFriendListForType:self.type];
    NSMutableArray *newArray = [NSMutableArray array];
    [newArray addObjectsFromArray:[self fengzhuangListArray:array]];
    [m_dataArray removeAllObjects];
    [m_dataArray addObjectsFromArray:newArray];
    
//    if (m_apply) {
//        NSMutableDictionary *dicc = [m_apply copy];
//        NSMutableArray *array = [m_dataArray objectAtIndex:0];
//        [array insertObject:dicc atIndex:0];
//        
//        [m_dataArray addObject:array];
//        
//        [m_apply release];
//        m_apply = nil;
//    }
    
    dispatch_async( dispatch_get_main_queue(), ^(void){
        @try {
             m_tableView.dataSource = self;
            [self finishRefresh];
            
            [m_tableView reloadData];
        }
        @catch (NSException *exception) {
            NSLog(@"EScrollerViewqweqweqwe");
        }
    });
}

//获取修改
- (void)loadEditList
{
    NSString *time = [[NSUserDefaults standardUserDefaults] objectForKey:[NSString stringWithFormat:@"%@%dfriendListTime", g_nowUserInfo.userid, self.type]];
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    [dic setObject:time?time:@"0" forKey:@"lastUpdateTime"];//time?time:
    [dic setObject:REQUEST_PAGE_NUM forKey:@"pageSize"];
    [dic setObject:[NSString stringWithFormat:@"%d",m_nowPage] forKey:@"pageNo"];
    [dic setObject:[NSNumber numberWithInt:_type] forKey:@"type"];
    [[CommonHttpRequest defaultInstance] sendNewPostRequest:GET_FRIEND_LIST values:dic requestKey:GET_FRIEND_LIST delegate:self controller:self actiViewFlag:1 title:nil];
}

- (void)removeFriend:(NSNotification*)aNotification
{
    NSDictionary *friend = aNotification.object;
    int row = 0, list = 0;
    for (NSMutableArray *array in m_dataArray) {
        
        for (NSDictionary *dic in array) {
            if ([dic[@"friendId"] longLongValue] == [friend[@"friendId"]longLongValue]) {
                [array removeObject:dic];
                [m_tableView deleteRowsAtIndexPaths:@[[NSIndexPath indexPathForRow:row inSection:list]] withRowAnimation:UITableViewRowAnimationNone];
                break;
            }
            row++;
        }
        list++;
    }
}

- (void)getDataSource
{
    m_loadingMore = YES;

    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    [dic setObject:[NSNumber numberWithInt:_type] forKey:@"type"];
    [dic setObject:REQUEST_PAGE_NUM forKey:@"pageSize"];
    [dic setObject:[NSString stringWithFormat:@"%d",m_nowPage] forKey:@"pageNo"];

    [[CommonHttpRequest defaultInstance] sendNewPostRequest:GET_FRIEND_LIST values:dic requestKey:GET_FRIEND_LIST delegate:self controller:self actiViewFlag:0 title:nil];
    m_nowPage++;
}

#pragma mark --tableView
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return m_dataArray.count;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return [m_dataArray[section] count];
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return 0.1;
}

- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section
{
    if (section == (m_dataArray.count-1)) {
        return 0.1;
    }
    return 10;
}

- (UITableViewCell*)tableView:(UITableView*)tableView cellForRowAtIndexPath:(NSIndexPath*)indexPath
{
    static NSString* identifier = @"cell";
    FriendListCell* cell = [tableView dequeueReusableCellWithIdentifier:identifier];
    if (!cell) {
        cell = [[[FriendListCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier] autorelease];
        cell.backgroundView = [[[UIView alloc] initWithFrame:CGRectZero] autorelease];
        cell.backgroundView.backgroundColor = [UIColor whiteColor];
        cell.selectedBackgroundView = [Common creatCellBackView];
    }
    
    
    if(m_dataArray.count == 0){
        return nil;
    }
    
    if (IS_OS_8_OR_LATER)//分割线到头
    {
        cell.preservesSuperviewLayoutMargins = NO;
    }
    
    NSMutableArray *itemArray = m_dataArray[indexPath.section];
    
    NSMutableDictionary *dataDic = itemArray[indexPath.row];
    if ([dataDic[@"accountType"] isEqualToString:@"-1"]) {
        [cell setAddInfoDic:dataDic];
    }
    else {
        [cell setInfoDic:dataDic];
        
        NSString *imagePath = [dataDic[@"imgUrl"] stringByAppendingString:@"?imageView2/1/w/160/h/160"];
        UIImage *defaul = [UIImage imageNamed:@"common.bundle/common/center_my-family_head_icon.png"];
        [cell.m_headerView sd_setImageWithURL:[NSURL URLWithString:imagePath] placeholderImage:defaul];
    }
    return cell;
}

- (void)tableView:(UITableView*)tableView didSelectRowAtIndexPath:(NSIndexPath*)indexPath
{
    
    //标记以读
    NSMutableArray *itemArray = m_dataArray[indexPath.section];
    
    NSMutableDictionary *dict = itemArray[indexPath.row];

    int applyCount = [dict[@"accountType"] intValue];
    if (applyCount == -1) {
        
        FriendApplyViewController * friend = [[FriendApplyViewController alloc] init];
        friend.log_pageID = 400;
        friend.applyType = self.type;
        [self.navigationController pushViewController:friend animated:YES];
        [friend release];
    }
    else {
        
        NSNumber  *readCount = [NSNumber numberWithInt:[dict[@"readCount"] intValue]];//wangmin添加,解决糖圈左上角红点不消失问题
        [dict setObject:@0 forKey:@"readCount"];
        
        ShowConsultViewController *showConsultVC = [[ShowConsultViewController alloc] init];
        [showConsultVC setM_dicInfo:dict];
        if (_type == 1) {//1糖友,2医生
            showConsultVC.title = @"问医生";
            showConsultVC.log_pageID = 401;
            //标记以读
            g_nowUserInfo.friendMsgCount = MAX(g_nowUserInfo.friendMsgCount-[readCount intValue], 0);
        }
        else {
            showConsultVC.title = @"问医生";
            showConsultVC.log_pageID = 59;
            //标记以读
            g_nowUserInfo.doctorMsgCount = MAX(g_nowUserInfo.doctorMsgCount-[readCount intValue], 0);
        }
        
        [self.navigationController pushViewController:showConsultVC animated:YES];
        [showConsultVC release];
        
        [[NSNotificationCenter defaultCenter] postNotificationName:@"refleshFriendListTip" object:nil];//wangmin添加,解决糖圈左上角红点不消失问题

    }
    

}

- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {
        [cell setSeparatorInset:UIEdgeInsetsZero];
    }
    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {
        [cell setLayoutMargins:UIEdgeInsetsZero];
    }
}

#pragma mark --- 解除绑定
- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSMutableArray *itemArray = m_dataArray[indexPath.section];
    NSMutableDictionary *dict = itemArray[indexPath.row];
    
    //健康管理师和新的朋友
    if ([dict[@"accountType"] isEqualToString:@"1"]) {
        return YES;
    }
    else {
        return NO;
    }
}

- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        
        //删除消息
        [self removeBtnClicked];
        m_deleteIndexpath = [indexPath retain];
    }
    else if (editingStyle == UITableViewCellEditingStyleInsert) {
        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.
    }
}

- (NSString *)tableView:(UITableView *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return @"删除";
}

- (void)removeBtnClicked
{
    NSString *message = @"确定删除好友么？";
    NSString *okMes = @"确定";
    NSString *cancelMes = @"取消";
    //提示是否更换
    UIAlertView* av = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"提示", nil)
                                                 message:NSLocalizedString(message, nil)
                                                delegate:self
                                       cancelButtonTitle:NSLocalizedString(cancelMes, nil)
                                       otherButtonTitles:NSLocalizedString(okMes, nil), nil];
    av.tag = 2123;
    [av show];
    [av release];
}

- (void)beSureToRemove
{
    NSMutableArray *itemArray = m_dataArray[m_deleteIndexpath.section];
    NSMutableDictionary *dict = itemArray[m_deleteIndexpath.row];
    NSMutableDictionary* dic = [NSMutableDictionary dictionary];
    [dic setObject:dict[@"friendId"] forKey:@"friendId"];
    [[CommonHttpRequest defaultInstance] sendNewPostRequest:REMOVE_FRIEND_URL values:dic requestKey:REMOVE_FRIEND_URL delegate:self controller:self actiViewFlag:1 title:@""];
}

- (void)alertView:(UIAlertView*)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if(alertView.tag == 2123 ){
        if( buttonIndex == 1 ){
            [self beSureToRemove];
        }
        return;
    }
}

- (void)deleteData
{
    NSMutableArray *itemArray = m_dataArray[m_deleteIndexpath.section];
    NSMutableDictionary *dict = itemArray[m_deleteIndexpath.row];
    
    [[MsgDBOperate shareInstance] deleteRowForFriendId:[NSArray arrayWithObject:dict[@"friendId"]]];
    [m_dataArray removeObjectAtIndex:m_deleteIndexpath.row];
    [m_tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:m_deleteIndexpath] withRowAnimation:UITableViewRowAnimationFade];
    [m_deleteIndexpath release];
    m_deleteIndexpath = nil;
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    [m_headView egoRefreshScrollViewDidScroll:scrollView];
}

//UIScrollView松开手指
- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate
{
    [m_headView egoRefreshScrollViewDidEndDragging:scrollView];
}

//封装listArray
- (NSMutableArray*)fengzhuangListArray:(NSArray*)friendList
{
    NSMutableArray *listArray = [NSMutableArray array];
    
    int accountType = 0;
    NSMutableArray *sectionArray = nil;
    
    NSMutableDictionary *applyDic = nil;
    
    for (NSMutableDictionary *item in friendList) {
        
        if ([item[@"accountType"] intValue] == -1) { //新的朋友
            applyDic = item;
        }
        else if ([item[@"accountType"] intValue] != accountType) {
            
            sectionArray = [NSMutableArray array];
            [listArray addObject:sectionArray];
            
            accountType = [item[@"accountType"] intValue];
        }
        
        [sectionArray addObject:item];
    }
    if (applyDic && [applyDic[@"readCount"] intValue] > 0) { //新的朋友
        
        if (listArray.count) {
            sectionArray = [listArray objectAtIndex:0];
        }
        else {
            sectionArray = [NSMutableArray array];
            [listArray addObject:sectionArray];
        }
        [sectionArray insertObject:applyDic atIndex:0];
    }
    
    return listArray;
}

- (void)didFinishSuccess:(ASIHTTPRequest *)loader
{
    NSString *responseString = [loader responseString];
    NSDictionary *dic = [responseString KXjSONValueObject];
    NSLog(@"%@",dic);
    
    NSDictionary *head = [dic objectForKey:@"head"];
    if (![[head objectForKey:@"state"] intValue])
    {
        NSDictionary *body = [dic objectForKey:@"body"];
        if ([loader.username isEqualToString:GET_FRIEND_LIST]) {
            
            [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%@", head[@"timestamp"]] forKey:[NSString stringWithFormat:@"%@%dfriendListTime", g_nowUserInfo.userid, self.type]];
            [[NSUserDefaults standardUserDefaults] synchronize];
            
            //删除
            NSMutableArray *delFriendList = [NSMutableArray arrayWithArray:[body objectForKey:@"delFriendList"]];
            
            NSMutableArray *list = [NSMutableArray array];
            if ([body[@"applyCount"] intValue]) {
                
                NSMutableDictionary *m_apply = [[NSMutableDictionary alloc] init];
                [m_apply setObject:@"-1" forKey:@"id"];
                [m_apply setObject:@-1 forKey:@"friendId"];
                [m_apply setObject:[NSNumber numberWithInt:self.type] forKey:@"friendType"];
                [m_apply setObject:[NSString stringWithFormat:@"%@", g_nowUserInfo.userid] forKey:@"accountId"];
                [m_apply setObject:body[@"applyCount"] forKey:@"readCount"];
                [m_apply setObject:@"-1" forKey:@"accountType"];
                [m_apply setObject:[NSNumber numberWithLong:[CommonDate getLongTime]] forKey:@"createTime"];
                [m_apply setObject:[NSString stringWithFormat:@"%@",body[@"applyCount"]] forKey:@"applyCount"];
                [list addObject:m_apply];
            }
            else {
                [delFriendList addObject:@"-1"];
            }
            if (delFriendList.count) {
                [[MsgDBOperate shareInstance] deleteRowForFriendId:delFriendList];
            }
            
            //更新
            [list addObjectsFromArray:body[@"friendListDto"]];
            
            if (list.count) {
                for (NSMutableDictionary *itee in list) {
                    
                    for (NSMutableArray *arrays in m_dataArray) {
                        for (NSMutableDictionary *ii in arrays) {
                            if ([itee[@"friendId"] longLongValue] == [ii[@"friendId"] longLongValue]) {
                                [itee setObject:ii[@"draftContent"] forKey:@"draftContent"];
                            }
                        }
                    }
                }
                [[MsgDBOperate shareInstance] replaceChatRecordToDBWithData:list withType:self.type];
            }
            
            
            [NSThread detachNewThreadSelector:@selector(loadLocalFriendList) toTarget:self withObject:nil];
        }
        else if ([loader.username isEqualToString:REMOVE_FRIEND_URL])
        {
            NSLog(@"解除成功");
            [self deleteData];
        }
    }
    else {
        [Common TipDialog:[head objectForKey:@"msg"]];
        if ([loader.username isEqualToString:GET_FRIEND_LIST]){
            [self finishRefresh];
        }
    }
}

- (void)didFinishFail:(ASIHTTPRequest *)loader
{
    NSLog(@"fail");
    [self finishRefresh];
    if ([loader.username isEqualToString:GET_FRIEND_LIST]){
        m_loadingMore = NO;
    }
}

#pragma mark - EGORefreshTableHeaderDelegate

//收起刷新
- (void)finishRefresh{
    
    [m_headView egoRefreshScrollViewDataSourceDidFinishedLoading:m_tableView];
    m_isloading = NO;
}

- (void)egoRefreshTableHeaderDidTriggerRefresh:(EGORefreshTableHeaderView *)view
{
    if (m_isloading) {
        return;
    }
    //上拉加载  拖动过程中

    m_isloading = YES;
    //下拉刷新 开始请求新数据 ---原数据清除
    m_nowPage = 1;//复位
    
    [self loadEditList];
}

- (BOOL)egoRefreshTableHeaderDataSourceIsLoading:(EGORefreshTableHeaderView *)view
{
    return m_isloading;
}

- (NSDate *)egoRefreshTableHeaderDataSourceLastUpdated:(EGORefreshTableHeaderView *)view
{
    return [NSDate date];
}

- (void)setFoundListViewViewBlock:(FriendListViewViewBlock)_Friend
{
    m_FriendBlock = [_Friend copy];
}

@end

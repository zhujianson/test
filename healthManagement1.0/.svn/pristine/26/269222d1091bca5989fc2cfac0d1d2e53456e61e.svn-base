//
//  LocationManager.m
//  jiuhaohealth4.0
//
//  Created by wangmin on 15/9/10.
//  Copyright (c) 2015年 xuGuohong. All rights reserved.
//

#import "LocationManager.h"
#import <MapKit/MapKit.h>
#import "AppDelegate.h"
#import "CSqlite.h"

@interface LocationManager ()
<CLLocationManagerDelegate>


@end

@implementation LocationManager
{
    
    CLLocationManager *locationManager;
    CLLocation* _currentLocation;

    CSqlite *m_sqlite;

}


- (void)dealloc
{
    self.localCityString = nil;
    self.localStateString = nil;
    self.localSubLocationString = nil;
    self.gpsAccuracyString = nil;
    if(locationManager){
        [locationManager release];
        locationManager = nil;
    }
    [super dealloc];
}

+ (LocationManager *)sharedManager
{
    static LocationManager *class;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        class = [[LocationManager alloc] init];
    });
    
    return class;
}

//请求权限
- (void)requestLocationAuthorization
{
    if (!locationManager)
    {
        locationManager = [[CLLocationManager alloc] init];
    }
    locationManager.delegate = self;
    locationManager.distanceFilter = 50;//kCLDistanceFilterNone;
    locationManager.desiredAccuracy = kCLLocationAccuracyBestForNavigation;
    locationManager.pausesLocationUpdatesAutomatically = NO;
    
    if(IS_OS_8_OR_LATER) {
        [locationManager requestAlwaysAuthorization];
    }
    [locationManager startUpdatingLocation];
}

- (void)startSignificantChangeUpdates
{
    if([UIApplication sharedApplication].applicationState == UIApplicationStateBackground){
        [[Common getAppDelegate].stepCounterObj startRuningInBackground];
    }
    
    BOOL battery_saveFlag = [[NSUserDefaults standardUserDefaults] boolForKey:[NSString stringWithFormat:@"battery_saveFlag"]];
    if(battery_saveFlag){
        //省电模式 直接返回
        return;
    }
    [locationManager startUpdatingLocation];
    
}

- (void)stopSingificantChangeUpdates
{
    
    [[Common getAppDelegate].stepCounterObj stopRuningInBackground];
    
    if(locationManager){
        [locationManager stopUpdatingLocation];
    }

}


-(CLLocationCoordinate2D)zzTransGPS:(CLLocationCoordinate2D)yGps
{
    
    if(!m_sqlite){
        m_sqlite = [[CSqlite alloc]init];
        [m_sqlite openSqlite];
    }
    
    int TenLat=0;
    int TenLog=0;
    TenLat = (int)(yGps.latitude*10);
    TenLog = (int)(yGps.longitude*10);
    NSString *sql = [[NSString alloc]initWithFormat:@"select offLat,offLog from gpsT where lat=%d and log = %d",TenLat,TenLog];
    sqlite3_stmt* stmtL = [m_sqlite NSRunSql:sql];
    int offLat=0;
    int offLog=0;
    while (sqlite3_step(stmtL)==SQLITE_ROW)
    {
        offLat = sqlite3_column_int(stmtL, 0);
        offLog = sqlite3_column_int(stmtL, 1);
        
    }
    
    yGps.latitude = yGps.latitude+offLat*0.0001;
    yGps.longitude = yGps.longitude + offLog*0.0001;
    return yGps;
    
    
}


- (void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation
{
    NSLog(@"didUpdate");
    
    self.gpsAccuracyString = [NSString stringWithFormat:@"%f",newLocation.horizontalAccuracy];
    
    CLGeocoder *clGeoCoder = [[CLGeocoder alloc] init];
    CLGeocodeCompletionHandler handle = ^(NSArray *placemarks,NSError *error)
    {
        for (CLPlacemark * placeMark in placemarks)
        {
            
            NSDictionary *addressDic=placeMark.addressDictionary;
            NSString *state=[addressDic objectForKey:@"State"];
            NSString *subLocality=[addressDic objectForKey:@"SubLocality"];
            NSString *city = [addressDic objectForKey:@"City"];
            
            if(!city){
                city = state;
            }
            self.localStateString = state;
            self.localSubLocationString = subLocality;
            self.localCityString = city;
            
            BOOL isStopCountering = [[NSUserDefaults standardUserDefaults] boolForKey:@"isStopCountering"];
            if(isStopCountering || [Common getAppDelegate].stepCounterObj.mySteperStatus != working){
                [locationManager stopUpdatingLocation];
            }
        }
    };
    [clGeoCoder reverseGeocodeLocation:newLocation completionHandler:handle];
    [clGeoCoder release];
    
    //改为室内模式
    if([Common getAppDelegate].stepCounterObj.mySteperStatus != indoorStatus || [Common getAppDelegate].stepCounterObj.myTimerStatus != working){
        return;
    }
    
    // check the zero point
    if  (newLocation.coordinate.latitude == 0.0f || newLocation.coordinate.longitude == 0.0f)
        return;
    
    
    if(newLocation.speed == -1){
        
        return;
    }
    
    //    关闭gps速度检测
    //    if(newLocation.speed > g_nowUserInfo.maxSpeed){
    //
    //        self.stepCounterObj.speedString = [NSString stringWithFormat:@"%.2f",3.6 * newLocation.speed];//单位km/h
    //        _currentLocation = nil;//将上一位置置为空
    //        return;
    //    }
    
    
    CLLocationCoordinate2D mylocation = newLocation.coordinate;//手机GPS
    //    mylocation = CLLocationCoordinate2DMake(40.005614618970277, 116.48354328368657);//test
    
    mylocation = [self zzTransGPS:mylocation];///火星GPS
    CLLocation * newLoc = [[CLLocation alloc] initWithLatitude:mylocation.latitude longitude:mylocation.longitude];
    
    // check the move distance
    //获取最后一个坐标点的集合
    NSArray *lastLocPointsArray = [[Common getAppDelegate].stepCounterObj.locPointsArray lastObject];
    if(lastLocPointsArray.count){
        if(_currentLocation){
            [_currentLocation release];
        }
        _currentLocation = [lastLocPointsArray.lastObject retain];
    }else{
        _currentLocation = nil;
    }
    
    if (_currentLocation) {
        CLLocationDistance distance = [newLoc distanceFromLocation:_currentLocation];
        if (distance < 5){
            [newLoc release];
            return;
        }
        NSMutableArray *lastArray = [[Common getAppDelegate].stepCounterObj.locPointsArray lastObject];
        if(distance <= 500){
            [lastArray addObject:newLoc];
        }else {
            NSMutableArray *newLocArray = [NSMutableArray arrayWithCapacity:0];
            [newLocArray addObject:newLoc];
            [[Common getAppDelegate].stepCounterObj.locPointsArray addObject:newLocArray];
        }
    }else{
        //添加第一个点
        NSMutableArray *lastArray = [[Common getAppDelegate].stepCounterObj.locPointsArray lastObject];
        [lastArray addObject:newLoc];
    }
    [newLoc release];
    [[NSNotificationCenter defaultCenter] postNotificationName:@"RefreshRouteLineNotification" object:nil];
    
}


- (void)locationManagerDidPauseLocationUpdates:(CLLocationManager *)manager
{
    BOOL isStopCountering = [[NSUserDefaults standardUserDefaults] boolForKey:@"isStopCountering"];
    if(!isStopCountering && [UIApplication sharedApplication].applicationState != UIApplicationStateActive){
        //正在运行时 推入后台开启定位服务
        [self startSignificantChangeUpdates];
        [[Common getAppDelegate].stepCounterObj sendToBackground];
    }
}






@end
